Routes - RouteConfig

public static void RegisterRoutes(RouteCollection routes)
{
    routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

    //Las rutas custom se colocan en orden de prioridades 
    //Singular to General

    //http://localhost:52616/movies/Released todo las url que arranquen asi /movies/released las atrapa este filtro
    //http://localhost:52616/movies/Released/1/2 OK sin las restricciones
    //http://localhost:52616/movies/Released/ 404 por mas que el action method tenga default values 
    //si en el default de este patrón de rutas especificamos default values entonces esta ruta sera valida
    //defaults: new { Controller = "Movies", action = "ByReleaseDate", month = 90, year=100 });
    //http://localhost:52616/movies/Released/01/2018 valido

    routes.MapRoute("dateFilterMovie", //debe ser unique
        url: "movies/released/{month}/{year}", //url: formato esperado en el browser
        defaults: new { Controller = "Movies", action = "ByReleaseDate" },
        constraints: new { year =  @"2017|2018", month =@"\d{2}" }); //Constraints month solo 2 digitos - años permitidos: 2017/2018


    //Lo malo de lo anterior es que si cambias el nombre del metodo ByReleaseDate en el controller y te olvidas de cambiarlo
    //aca no va a funcar. Para evitar esto no tenemos que usar "magicString" 
    //Podemos configurar la ruta directamente en el actionMethod --> Para esto tenemos que usar AttributesRoutes
    //ejemplo de ruta en movies/released2
    routes.MapMvcAttributeRoutes();


    //http://localhost:52616/movies/ByReleaseDate la captura este filtro
    routes.MapRoute(
        name: "Default",
        url: "{controller}/{action}/{id}",
        defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }
    );
 }


 Controller
public ContentResult ByReleaseDate(int month, int year)
{
    string result = string.Format("By Month {0} / Year {1}", month, year);
    return Content(result);
}

// Requiere routes.MapMvcAttributeRoutes();
//http://localhost:52616/movies/Released2/13/2 ERROR
//http://localhost:52616/movies/Released2/12/2 VALID
[Route("movies/released2/{month:regex(\\d{2}):range(1,12)}/{year}")]
public ContentResult ByReleaseDate2(int month, int year)
{
    string result = string.Format("By Month {0} / Year {1} (2)", month, year);
    return Content(result);
}


-----------------------------------------
Update DB Migration

1) Modificamos el modelo
2) add-migration NAME
3) update-database

-----------------------------------------
Agregando una nueva tabla al modelo

Para agregar una nueva tabla la tenemos que agregar en ApplicationDbContext
por ejemplo si agregamos la tabla Movies:  public DbSet<Movie> Movies { get; set; }

PM> add-migration NAME
PM> update-database

------------------------------------------
Agregando datos a una tabla

PM> add-migration addPopulateGenre

Genera clase de migración:
public override void Up()
{
    Sql("INSERT INTO Genres(Name) VALUES ('Comedy')");
    Sql("INSERT INTO Genres(Name) VALUES ('Action')");
    Sql("INSERT INTO Genres(Name) VALUES ('Family')");
    Sql("INSERT INTO Genres(Name) VALUES ('Romance')");
}

Agregamos los insert que deseamos y luego:

PM> update-database

------------------------------------
DataBinding

//ViewModel
public class CustomerCreateVM
{
    public IEnumerable<MembershipType> MembershipTypes{ get; set; }
    public Customer Customer { get; set; }
}

//Action for Create Post

[HttpPost]
public ActionResult Create(Customer customer)
{
    _context.Customers.Add(customer);
    _context.SaveChanges();
    return RedirectToAction("Index");
}

/*
Por más que el VM de la vista Create sea del tipo CustomerCreateVM en el metodo Create POST
si le pongo que va a recibir un customer lo bindea porq:
name="Customer.Name"

entonces va a intentar bindear el name con la property customer, si nosotros especificamos que el nombre del parametro es customer
mapea los valores correctamente.

si yo tuviera: public ActionResult Create(Customer customer2) NO matchearia el prefijo del name entonces esto recibiria null ya que espera
un customer.name y no un customer2.name

*/ 

-------------------------------
//Proceso recomendado para la edición 

[HttpPost]
public ActionResult Edit(Customer customer)
{
    var customerDB = _context.Customers.FirstOrDefault(c => c.CustomerID == customer.CustomerID);

    //First Approach --> NO RECOMENDADO
    //Enfoque recomendado por Tutoriales Oficiales de Microsoft
    //Muchos issues
    //Actualiza todos los datos siempre (por ahi hay campos que no queres actualizar)
    //TryUpdateModel(customerDB);

    //Second Approach --> NO RECOMENDADO por magic strings
    //Mapeamos con automapper solo las properties a actualizar entre customerDB y customer recibido de la vista
    //Solo actualizar los campos que necesitas
    //TryUpdateModel(customerDB, "", new string[] { "Name", "BirthDate" });

    //Third Approach--> Enfoque Recomendado
    //Mapeamos con automapper solo las properties a actualizar entre customerDB y customer recibido de la vista
    //Mapper.Map(customer, customerInDb)
    //SaveChanges()

    customerDB.Name = customer.Name;
    customerDB.BirthDate = customer.BirthDate;
    customerDB.MembershipTypeID = customer.MembershipTypeID;
    customerDB.IsSubscribedToNewsletter = customer.IsSubscribedToNewsletter;

    _context.SaveChanges();

    return RedirectToAction("Index");
}