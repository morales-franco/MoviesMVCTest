Routes - RouteConfig

public static void RegisterRoutes(RouteCollection routes)
{
    routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

    //Las rutas custom se colocan en orden de prioridades 
    //Singular to General

    //http://localhost:52616/movies/Released todo las url que arranquen asi /movies/released las atrapa este filtro
    //http://localhost:52616/movies/Released/1/2 OK sin las restricciones
    //http://localhost:52616/movies/Released/ 404 por mas que el action method tenga default values 
    //si en el default de este patrón de rutas especificamos default values entonces esta ruta sera valida
    //defaults: new { Controller = "Movies", action = "ByReleaseDate", month = 90, year=100 });
    //http://localhost:52616/movies/Released/01/2018 valido

    routes.MapRoute("dateFilterMovie", //debe ser unique
        url: "movies/released/{month}/{year}", //url: formato esperado en el browser
        defaults: new { Controller = "Movies", action = "ByReleaseDate" },
        constraints: new { year =  @"2017|2018", month =@"\d{2}" }); //Constraints month solo 2 digitos - años permitidos: 2017/2018


    //Lo malo de lo anterior es que si cambias el nombre del metodo ByReleaseDate en el controller y te olvidas de cambiarlo
    //aca no va a funcar. Para evitar esto no tenemos que usar "magicString" 
    //Podemos configurar la ruta directamente en el actionMethod --> Para esto tenemos que usar AttributesRoutes
    //ejemplo de ruta en movies/released2
    routes.MapMvcAttributeRoutes();


    //http://localhost:52616/movies/ByReleaseDate la captura este filtro
    routes.MapRoute(
        name: "Default",
        url: "{controller}/{action}/{id}",
        defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }
    );
 }


 Controller
public ContentResult ByReleaseDate(int month, int year)
{
    string result = string.Format("By Month {0} / Year {1}", month, year);
    return Content(result);
}

// Requiere routes.MapMvcAttributeRoutes();
//http://localhost:52616/movies/Released2/13/2 ERROR
//http://localhost:52616/movies/Released2/12/2 VALID
[Route("movies/released2/{month:regex(\\d{2}):range(1,12)}/{year}")]
public ContentResult ByReleaseDate2(int month, int year)
{
    string result = string.Format("By Month {0} / Year {1} (2)", month, year);
    return Content(result);
}


-----------------------------------------
Update DB Migration

1) Modificamos el modelo
2) add-migration NAME
3) update-database

-----------------------------------------
Agregando una nueva tabla al modelo

Para agregar una nueva tabla la tenemos que agregar en ApplicationDbContext
por ejemplo si agregamos la tabla Movies:  public DbSet<Movie> Movies { get; set; }

PM> add-migration NAME
PM> update-database

------------------------------------------
Agregando datos a una tabla

PM> add-migration addPopulateGenre

Genera clase de migración:
public override void Up()
{
    Sql("INSERT INTO Genres(Name) VALUES ('Comedy')");
    Sql("INSERT INTO Genres(Name) VALUES ('Action')");
    Sql("INSERT INTO Genres(Name) VALUES ('Family')");
    Sql("INSERT INTO Genres(Name) VALUES ('Romance')");
}

Agregamos los insert que deseamos y luego:

PM> update-database

------------------------------------
DataBinding

//ViewModel
public class CustomerCreateVM
{
    public IEnumerable<MembershipType> MembershipTypes{ get; set; }
    public Customer Customer { get; set; }
}

//Action for Create Post

[HttpPost]
public ActionResult Create(Customer customer)
{
    _context.Customers.Add(customer);
    _context.SaveChanges();
    return RedirectToAction("Index");
}

/*
Por más que el VM de la vista Create sea del tipo CustomerCreateVM en el metodo Create POST
si le pongo que va a recibir un customer lo bindea porq:
name="Customer.Name"

entonces va a intentar bindear el name con la property customer, si nosotros especificamos que el nombre del parametro es customer
mapea los valores correctamente.

si yo tuviera: public ActionResult Create(Customer customer2) NO matchearia el prefijo del name entonces esto recibiria null ya que espera
un customer.name y no un customer2.name

*/ 

-------------------------------
//Proceso recomendado para la edición 

[HttpPost]
public ActionResult Edit(Customer customer)
{
    var customerDB = _context.Customers.FirstOrDefault(c => c.CustomerID == customer.CustomerID);

    //First Approach --> NO RECOMENDADO
    //Enfoque recomendado por Tutoriales Oficiales de Microsoft
    //Muchos issues
    //Actualiza todos los datos siempre (por ahi hay campos que no queres actualizar)
    //TryUpdateModel(customerDB);

    //Second Approach --> NO RECOMENDADO por magic strings
    //Mapeamos con automapper solo las properties a actualizar entre customerDB y customer recibido de la vista
    //Solo actualizar los campos que necesitas
    //TryUpdateModel(customerDB, "", new string[] { "Name", "BirthDate" });

    //Third Approach--> Enfoque Recomendado
    //Mapeamos con automapper solo las properties a actualizar entre customerDB y customer recibido de la vista
    //Mapper.Map(customer, customerInDb)
    //SaveChanges()

    customerDB.Name = customer.Name;
    customerDB.BirthDate = customer.BirthDate;
    customerDB.MembershipTypeID = customer.MembershipTypeID;
    customerDB.IsSubscribedToNewsletter = customer.IsSubscribedToNewsletter;

    _context.SaveChanges();

    return RedirectToAction("Index");
}
-----------------------------
//Anti-forgery Tokens
/*
El framework coloca un token hidden en el formulario utilizando un
@Html.AntiForgeryToken()

y luego valida que ese token no haya sido modificado en el backend
utilizando el filtro
[ValidateAntiForgeryToken]
*/

/*
Ejemplo
<input name="__RequestVerificationToken" type="hidden" value="UPIyPTCcuwFnp3CnY5nniGk1x8MjcfLhlEFWUZiORFZVIU0Y6qJacWs9S-hT1TVK1dnuH2AdRwFw4KF0Xym-xG9M2eRxgDaLu6aKe7SYEI01">

Modifico el token anterior colocado por el framework y hago el submit

Exception!
The anti-forgery token could not be decrypted. If this application is hosted by a Web Farm or cluster, ensure that all machines are running the same version of ASP.NET Web Pages and that the <machineKey> configuration specifies explicit encryption and validation keys. AutoGenerate cannot be used in a cluster.
*/


-------------------------------
Custom Data annotations

//In the model
[IsThanZero]
public int NumberInStock { get; set; }

//In the backend
public class IsThanZero : ValidationAttribute
{

    protected override ValidationResult IsValid(object value, ValidationContext validationContext)
    {
        var movie = (MovieCrudVM)validationContext.ObjectInstance;

        if (movie.NumberInStock > 0)
            return ValidationResult.Success;

        return new ValidationResult("The number in stock must be than zero");

    }

}

//The custom data annotations will not be checking in client side (only standard validations are include in jqueryval [required, email, etc]).
//The custom data annotations will be check in server side when the form is post


-----------------------
//Client side Validation
//This feature use jquery validate

//In the form we add this reference: 
@section scripts{ 
    @Scripts.Render("~/bundles/jqueryval");
}

-----------------------
//WEB API

/*
ASP.NET MVC

CLIENT ---> REQUEST ----> SERVER
	   <---  HTML <-----

ASP.NET WEB API

CLIENT ---> REQUEST ----> SERVER
	   <---  DATA <-----


Benefits:
* Menos recursos en el servidor (mejora escalabilidad - no tenemos html)
* Menos ancho de banda --> solo devolvemos data --> mejoramos performance
* Soporte multiple tipos de cliente --> Le puede pegar una tablet, smartphone, pc, etc

*/

/*
Convention API REST

API: /api/customers

GET    /api/customers
GET    /api/customers/1
POST   /api/customers
PUT    /api/customers/1
DELETE /api/customers/1


*/


//Construcción WEB API
//API REST PURA
public static void Register(HttpConfiguration config)
{
    config.MapHttpAttributeRoutes();

    config.Routes.MapHttpRoute(
        name: "DefaultApi",
        routeTemplate: "api/{controller}/{id}",
        defaults: new { id = RouteParameter.Optional }
    );
}

/*
Cuando enviamos un request al API:
1) Para encontrar el Controller WEB API agrega "Controller" al valor de la variable {controller}
2) Se evalua el HTTP METHODS (GET, POST, PUT, DELETE) y se busca un action cuyo nombre comience con el 
HTTP METHOD NAME.

For example:
GET Request --> WEB API looks for an action that starts with "GET" such as: "GetContact" or "GetAllContacts"

Esto es una convention
En el caso de no cumplir con la convención tenemos que especificar el [HTTP METHOD] en el metodo.

// GET api/customers
public IEnumerable<Customer> GetCustomers()

// GET api/customers/1
public Customer GetCustomer(int id)

//POST api/customers
[HttpPost]
public Customer CreateCustomer(Customer customer)      

--> En este caso tuvimos que especificar [HttpPost] porque el nombre de la acción es CreateCustomer y NO cumple
con la convención, deberia ser PostCustomer en ese caso no es necesario el filtro.


3) Luego se evalua el parameter {id}

**** En el caso que nuestra API no sea rest pura entonces deberiamos modificar el Route para que evalue el nombre de la acción 
además del verbo http
*/




/*
POST http://localhost:52616/api/customers

POSTMAN:
HEADER:
Content-Type : application/json

BODY:
RAW:
{
        "Name": "Franco6",
        "IsSubscribedToNewsletter": false,
        "MembershipType": null,
        "MembershipTypeID": 4,
        "BirthDate": "1992-06-04T00:00:00"
}

*/

